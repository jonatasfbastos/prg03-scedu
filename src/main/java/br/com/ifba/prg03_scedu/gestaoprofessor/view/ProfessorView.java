/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package br.com.ifba.prg03_scedu.gestaoprofessor.view;

import br.com.ifba.prg03_scedu.Prg03SceduApplication;
import br.com.ifba.prg03_scedu.gestaoprofessor.controller.ProfessorIController;
import br.com.ifba.prg03_scedu.gestaoprofessor.entity.Professor;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.builder.SpringApplicationBuilder;
import org.springframework.context.ConfigurableApplicationContext;
import static org.springframework.data.jpa.domain.AbstractPersistable_.id;
import org.springframework.stereotype.Component;

/**
 *
 * @author hmart
 */

@Component

public class ProfessorView extends javax.swing.JFrame {

    /**
     * Creates new form ProfessorView
     */
    
    private final ProfessorIController professorControler; 
    
    
    @Autowired
    
    //Inicia a Tela e e manipulação dos dados no Banco de dados
    public ProfessorView(ProfessorIController professorControler) {
        this.professorControler = professorControler;
        initComponents();
        listarProfessor();
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        
    }

    public ProfessorView() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnSair = new javax.swing.JButton();
        txtn1 = new javax.swing.JLabel();
        btnAdicionar = new javax.swing.JButton();
        btnPesquisar = new javax.swing.JButton();
        btnExcluir = new javax.swing.JButton();
        btnAtualizar = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        txtPesquisar = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "NOME", "CPF", "MATERIA", "NASCIMENTO", "FORMADO"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Double.class, java.lang.String.class, java.lang.Byte.class, java.lang.String.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        btnSair.setText("SAIR");
        btnSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSairActionPerformed(evt);
            }
        });

        txtn1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        txtn1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        txtn1.setText("GESTÃO DE PROFESSOR");

        btnAdicionar.setText("ADICIONAR PROFESSOR");
        btnAdicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdicionarActionPerformed(evt);
            }
        });

        btnPesquisar.setText("Pesquisar");
        btnPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPesquisarActionPerformed(evt);
            }
        });

        btnExcluir.setText("EXCLUIR PROFESSOR");
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirActionPerformed(evt);
            }
        });

        btnAtualizar.setText("ATUALIZAR");
        btnAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtualizarActionPerformed(evt);
            }
        });

        btnEditar.setText("EDITAR PROFESSOR");
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        txtPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPesquisarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSair, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnAtualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(74, 74, 74)
                        .addComponent(txtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 963, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(btnAdicionar, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(127, 127, 127)
                            .addComponent(btnExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(152, 152, 152)
                            .addComponent(btnEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPesquisar)
                    .addComponent(txtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdicionar, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSair)
                    .addComponent(btnAtualizar))
                .addGap(25, 25, 25))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSairActionPerformed
        dispose();
    }//GEN-LAST:event_btnSairActionPerformed

    private void btnAdicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdicionarActionPerformed
        //Chamando a classe de cadastrar e Tornando o a interface Visível
        new ProfessorCadastrar(professorControler).setVisible(true);
        //Atualizando a Página caso tenha alguma alterção 
        listarProfessor();
        //Mensagem de atualização da Lista
        JOptionPane.showMessageDialog(null, "Lista Atualizada!");
    }//GEN-LAST:event_btnAdicionarActionPerformed

    private void btnPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesquisarActionPerformed
        pesquisarProfessor();
    }//GEN-LAST:event_btnPesquisarActionPerformed

    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed

       // new ProfessorExcluir().setVisible(true);
       int selectedRow = jTable1.getSelectedRow();
        if (selectedRow != -1) {
            // Verifica se o valor na coluna 0 pode ser convertido para Long, sendo essa coluna ID
            try {
                //Pego o valor Selecionando pelo usuário
                Long id = (Long) jTable1.getValueAt(selectedRow, 0);
                
                //Verifico se encontra o professor informado
                Professor professor = professorControler.findById(id);

                if (professor != null) {
                    //Confirmo a exclusão dos dados
                    int resposta = JOptionPane.showConfirmDialog(null, "Deseja excluir as informações do Professor(a): " 
                            + professor.getNome() + " ?","Confirmação", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

                    if (resposta == JOptionPane.YES_OPTION) {
                        //Chama a camada de controle para realizar a exclusão pelo id informado
                        professorControler.delete(id);
                        //Informo que a realização da exclusão foi realizada com sucesso
                        JOptionPane.showMessageDialog(null, "Deletado com sucesso!");

                        //Atualizo a lista
                        listarProfessor(); // Atualiza a lista de professores
                    }
                    //Tratos as exceções 
                } else {
                    JOptionPane.showMessageDialog(null, "Professor não encontrado!");
                }
            } catch (ClassCastException e) {
                JOptionPane.showMessageDialog(null, "Erro ao converter o ID. Verifique o tipo de dado na tabela.");
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Erro ao excluir professor: " + e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(null, "Nenhuma linha ou ID encontrado!");
        }
       
    }//GEN-LAST:event_btnExcluirActionPerformed

    private void btnAtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtualizarActionPerformed
        
        listarProfessor();
    }//GEN-LAST:event_btnAtualizarActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
       
        int selectedRow = jTable1.getSelectedRow();
        
        if(selectedRow != -1){
            long id = (long) jTable1.getValueAt(selectedRow, 0);
            
            Professor professor = professorControler.findById(id);
            
            if(professor != null){
                new ProfessorEditar(professorControler, professor).setVisible(true);
                listarProfessor();
            }else{
                JOptionPane.showMessageDialog(null, "Professor não encontrado!");
            }
        }else {
            JOptionPane.showMessageDialog(null, "Nenhuma linha ou ID encontrado!");
        }
    }//GEN-LAST:event_btnEditarActionPerformed

    private void txtPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPesquisarActionPerformed
       //Chama o método de atualizar a tabela
        pesquisarProfessor();
    }//GEN-LAST:event_txtPesquisarActionPerformed

    
    public void listarProfessor(){
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        //Apagar todos os Dados
        model.setRowCount(0);
        
        //Busca todos os professor e jogar em um Array List pegando da entidade Professor
        List<Professor> professorList = professorControler.findAll();
        
        //Adicionado em uma linha do Jtable
        for (Professor professor : professorList){
            model.addRow(new Object[]{
               professor.getId(),
               professor.getNome(),
               professor.getCpf(),
               professor.getMateria(),
               professor.getNascimento(),
               professor.getFormado()
            });
        }
    }
    
    private void pesquisarProfessor(){
    
        Professor professorBusca = null;
        String idstr = txtPesquisar.getText();
        
        //Verificando Caso tenha 
        if (idstr == null || idstr.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, insira corretamente o nome/id do professor(a).");
            return;
        }

        try {
            //Pesquisando pelo ID
            long id;
            
            //Convertendo para Pesquisar pelo Id
            id = Long.parseLong(idstr);
            
            //Verificando No Banco de dados chamando o controler
            professorBusca = professorControler.findById(id);
            
            //Verificando se não achou o professor
            if (professorBusca == null) {
                JOptionPane.showMessageDialog(this, "Professor não encontrado.");
            } else {

                //Criando a Tabela de dados do banco de dados
                DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

                // Apagar todos os dados
                model.setRowCount(0);

                // Adicionar nova linha com os dados do professor
                model.addRow(new Object[]{
                    professorBusca.getId(),
                    professorBusca.getNome(),
                    professorBusca.getCpf(),
                    professorBusca.getMateria(),
                    professorBusca.getNascimento(),
                    professorBusca.getFormado()
                });
            }
        } catch (NumberFormatException e) {
            //Pesquisando pelo nome procurando no banco chamando no controller
            List<Professor> professores = professorControler.findByNome(idstr);
        
            //Verificando se encontrou o professor
            if(professores == null){
                JOptionPane.showMessageDialog(null, "Professor não encontrado");
                return;
            }
            
            //Criando a tabela de dados de banco de dados
            
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0);
            
            //Adicionando cada Professor encontrado à tabela
            for(Professor p : professores){
                model.addRow(new Object[]{
                    p.getId(),
                    p.getNome(),
                    p.getCpf(),
                    p.getMateria(),
                    p.getNascimento(),
                    p.getFormado()
                });
            }
            return;
        }
        
    }
    
    public static void main(String args[]) {     
        
        
        ConfigurableApplicationContext context = new SpringApplicationBuilder(Prg03SceduApplication.class).headless(false).run(args);

        ProfessorView professorView = context.getBean(ProfessorView.class);
        professorView.setVisible(true);
            
       
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdicionar;
    private javax.swing.JButton btnAtualizar;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnExcluir;
    private javax.swing.JButton btnPesquisar;
    private javax.swing.JButton btnSair;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField txtPesquisar;
    private javax.swing.JLabel txtn1;
    // End of variables declaration//GEN-END:variables

}
